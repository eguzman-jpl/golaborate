package commonpressure

import (
	"go/types"
	"net/http"

	"goji.io"
	"goji.io/pat"

	"github.jpl.nasa.gov/HCIT/go-hcit/server"
)

func httpWriteOnly(f errOnlyFunc, w http.ResponseWriter, r *http.Request) {
	err := f()
	if err == nil {
		w.WriteHeader(200)
		return
	}
	http.Error(w, err.Error(), http.StatusInternalServerError)
	return
}

func httpReturnString(f strErrFunc, w http.ResponseWriter, r *http.Request) {
	ss, err := f()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
	hp := server.HumanPayload{String: ss, T: types.String}
	hp.EncodeAndRespond(w, r)
	return
}

// HTTPWrapper provides HTTP bindings on top of the underlying Go interface
// BindRoutes must be called on it
type HTTPWrapper struct {
	// Sensor is the underlying sensor that is wrapped
	Sensor *Sensor

	// RouteTable maps goji patterns to http handlers
	RouteTable map[goji.Pattern]http.HandlerFunc
}

// NewHTTPWrapper returns a new HTTP wrapper with the route table pre-configured
func NewHTTPWrapper(urlStem string, s *Sensor) HTTPWrapper {
	w := HTTPWrapper{Sensor: s}
	rt := map[goji.Pattern]http.HandlerFunc{
		pat.Get(urlStem + "pressure"):            w.HTTPRead,
		pat.Delete(urlStem + "factory-reset"):    w.HTTPFactoryReset,
		pat.Delete(urlStem + "void-calibration"): w.HTTPVoidCal,
		pat.Post(urlStem + "set-span"):           w.HTTPSetSpan,
		pat.Post(urlStem + "set-zero"):           w.HTTPSetZero,
		pat.Get(urlStem + "version"):             w.HTTPVersion,
	}
	w.RouteTable = rt
	return w
}

// HTTPRead handles the single route served by a Sensor
func (h *HTTPWrapper) HTTPRead(w http.ResponseWriter, r *http.Request) {
	f, err := h.Sensor.Read()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
	hp := server.HumanPayload{Float: f, T: types.Float64}
	hp.EncodeAndRespond(w, r)
	return
}

// HTTPVoidCal reacts to a GET request by voiding the calibration and returning 200/ok,
// or any error generated by the sensor
func (h *HTTPWrapper) HTTPVoidCal(w http.ResponseWriter, r *http.Request) {
	httpWriteOnly(h.Sensor.VoidCalibration, w, r)
	return
}

// HTTPFactoryReset reacts to a GET request by resetting the sensor to its
// factory state (requiring a power cycle thereafter) and returning 200/ok
// or any error generated by the sensor
func (h *HTTPWrapper) HTTPFactoryReset(w http.ResponseWriter, r *http.Request) {
	httpWriteOnly(h.Sensor.FactoryReset, w, r)
	return
}

// HTTPSetSpan reacts to a GET request by setting the span of the sensor
// to the current pressure and returning 200/ok
// or any error generated by the sensor
func (h *HTTPWrapper) HTTPSetSpan(w http.ResponseWriter, r *http.Request) {
	httpWriteOnly(h.Sensor.SetSpan, w, r)
	return
}

// HTTPSetZero reacts to a GET request by setting the zero point of the sensor
// to the current pressure and returning 200/ok
// or any error generated by the sensor
func (h *HTTPWrapper) HTTPSetZero(w http.ResponseWriter, r *http.Request) {
	httpWriteOnly(h.Sensor.SetZero, w, r)
	return
}

// HTTPVersion reacts to a GET request by relaying the version information from
// the sensor and returning 200/ok
// or any error generated by the sensor
func (h *HTTPWrapper) HTTPVersion(w http.ResponseWriter, r *http.Request) {
	httpReturnString(h.Sensor.GetVer, w, r)
}
